#include <iostream>

using namespace std;

// Вспомогательные функции для обработки пользовательского ввода
void   FillArray ( int arr [], int size) {
    for ( int i = 0 ; i <size; i ++) {
        cout << " Введите " << i + 1 << " массива элемента " ;
        cin >> arr [i];
    }
}
void   PrintArray(int arr[], int n) {
    for (int i=0; i<n; i++)
        cout << arr[i] << " ";
    cout << "\n";
}

//Функция для преобразования в двоичную кучу поддерева с корневым узлом i. Двоичная куча здесь - это MaxHeap: значение в родительском узле больше значений
//в его двух дочерних узлах
void BuildHeap(int arr[], int n, int i) { //массив, размера массива, i элемент - родительский узел кучи
    int largest = i;
    int L = 2 * i + 1; //индекс левого элемента
    int R = 2 * i + 2; //индекс правого элемента

    if (L < n && arr[L] > arr[largest])
        largest = L;

    if (R < n && arr[R] > arr[largest])
        largest = R;


    // Если индекс максиммального элемента не равен индексу родительского узла, то мы
    if (largest != i) {
        swap(arr[i], arr[largest]); //1) делаем обмен
        BuildHeap(arr, n, largest); //2) рекурсивно преобразуем в двоичную кучу затронутое поддерево
    }
}


void HeapSort(int arr[], int n)
{
    // Построение кучи(перегруппируем массив)
    for (int i = n / 2 - 1; i >= 0; i--)
        BuildHeap(arr, n, i);

    // Пирамидальная сортировка
    for (int i=n-1; i>=0; i--) {   //перемещаем текущий корень в конец
        swap(arr[0], arr[i]);

        //Вызываем функцию BuildHeap уменьшенной куче
        BuildHeap(arr, i, 0);
    }
}
//Сведения об алгоритме пирамиадальная сортировка:
//Пирамидальная сортировка  — это метод сортировки сравнением, основанный двоичной куче.
//Двоичная куча - это СД,законченное двоичное дерево, в котором элементы хранятся в особом порядке.
//Для сортировки по возрастанию правило следующее: значение в родительском узле больше значений в его двух дочерних узлах.
//Cложность сортировки O(n*logn) для любого случая.

int  main () {
    int size;
    cout << " Введите количество элементовеннтов в массиве " ;
    cin >> size;
    int arr [size];
    FillArray (arr, size);
    HeapSort (arr, size);
    cout << " Отсортированный массив: " ;
    PrintArray (arr, size);
    return 0 ;
}
